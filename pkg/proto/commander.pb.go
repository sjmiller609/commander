// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commander.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Commander service

type CommanderClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error)
	UpgradeDeployment(ctx context.Context, in *UpgradeDeploymentRequest, opts ...grpc.CallOption) (*UpgradeDeploymentResponse, error)
	DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error)
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
}

type commanderClient struct {
	cc *grpc.ClientConn
}

func NewCommanderClient(cc *grpc.ClientConn) CommanderClient {
	return &commanderClient{cc}
}

func (c *commanderClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/commander.Commander/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	out := new(GetDeploymentResponse)
	err := grpc.Invoke(ctx, "/commander.Commander/GetDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	out := new(CreateDeploymentResponse)
	err := grpc.Invoke(ctx, "/commander.Commander/CreateDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderClient) UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error) {
	out := new(UpdateDeploymentResponse)
	err := grpc.Invoke(ctx, "/commander.Commander/UpdateDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderClient) UpgradeDeployment(ctx context.Context, in *UpgradeDeploymentRequest, opts ...grpc.CallOption) (*UpgradeDeploymentResponse, error) {
	out := new(UpgradeDeploymentResponse)
	err := grpc.Invoke(ctx, "/commander.Commander/UpgradeDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderClient) DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error) {
	out := new(DeleteDeploymentResponse)
	err := grpc.Invoke(ctx, "/commander.Commander/DeleteDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	out := new(GetSecretResponse)
	err := grpc.Invoke(ctx, "/commander.Commander/GetSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Commander service

type CommanderServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error)
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)
	UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*UpdateDeploymentResponse, error)
	UpgradeDeployment(context.Context, *UpgradeDeploymentRequest) (*UpgradeDeploymentResponse, error)
	DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*DeleteDeploymentResponse, error)
	GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error)
}

func RegisterCommanderServer(s *grpc.Server, srv CommanderServer) {
	s.RegisterService(&_Commander_serviceDesc, srv)
}

func _Commander_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commander.Commander/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commander_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commander.Commander/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commander_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commander.Commander/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commander_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commander.Commander/UpdateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).UpdateDeployment(ctx, req.(*UpdateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commander_UpgradeDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).UpgradeDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commander.Commander/UpgradeDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).UpgradeDeployment(ctx, req.(*UpgradeDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commander_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commander.Commander/DeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).DeleteDeployment(ctx, req.(*DeleteDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commander_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commander.Commander/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commander_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commander.Commander",
	HandlerType: (*CommanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Commander_Ping_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _Commander_GetDeployment_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _Commander_CreateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _Commander_UpdateDeployment_Handler,
		},
		{
			MethodName: "UpgradeDeployment",
			Handler:    _Commander_UpgradeDeployment_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _Commander_DeleteDeployment_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Commander_GetSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commander.proto",
}

func init() { proto1.RegisterFile("commander.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0xcf, 0xcd,
	0x4d, 0xcc, 0x4b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x48,
	0xf1, 0x80, 0x98, 0xf9, 0x79, 0x10, 0x09, 0x29, 0x81, 0x94, 0xd4, 0x82, 0x9c, 0xfc, 0xca, 0xdc,
	0xd4, 0xbc, 0x12, 0xa8, 0x08, 0x4f, 0x71, 0x6a, 0x72, 0x51, 0x2a, 0x94, 0x67, 0xf4, 0x94, 0x85,
	0x8b, 0xd3, 0x19, 0xa6, 0x57, 0xc8, 0x92, 0x8b, 0x25, 0x20, 0x33, 0x2f, 0x5d, 0x48, 0x4c, 0x0f,
	0x61, 0x01, 0x48, 0x20, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a, 0x1c, 0x43, 0xbc, 0xb8,
	0x20, 0x3f, 0xaf, 0x38, 0x55, 0x89, 0x41, 0x28, 0x84, 0x8b, 0xd7, 0x3d, 0xb5, 0xc4, 0x05, 0x6e,
	0x9b, 0x90, 0x3c, 0x92, 0x5a, 0x14, 0x19, 0x98, 0x61, 0x0a, 0xb8, 0x15, 0xc0, 0x4d, 0x8d, 0xe5,
	0x12, 0x70, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x45, 0x32, 0x58, 0x09, 0x49, 0x1f, 0xba, 0x24, 0xcc,
	0x6c, 0x65, 0xbc, 0x6a, 0x90, 0x8d, 0x0f, 0x2d, 0x48, 0xc1, 0x6d, 0x3c, 0xba, 0x24, 0x36, 0xe3,
	0x31, 0xd5, 0xc0, 0x8d, 0x4f, 0xe0, 0x12, 0x0c, 0x2d, 0x48, 0x2f, 0x4a, 0x4c, 0x41, 0x36, 0x1f,
	0x55, 0x2f, 0x9a, 0x2c, 0xcc, 0x02, 0x15, 0xfc, 0x8a, 0x90, 0x3d, 0xe0, 0x92, 0x9a, 0x93, 0x8a,
	0xd3, 0x03, 0xe8, 0x92, 0xd8, 0x3c, 0x80, 0xa9, 0x06, 0x6e, 0xbc, 0x07, 0x17, 0xa7, 0x7b, 0x6a,
	0x49, 0x30, 0x38, 0xc1, 0x08, 0x49, 0xa3, 0xc6, 0x17, 0x44, 0x14, 0x66, 0xa0, 0x0c, 0x76, 0x49,
	0x98, 0x49, 0x4e, 0xec, 0x51, 0xac, 0xe0, 0x04, 0x97, 0xc4, 0x06, 0xa6, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xa0, 0xee, 0xa1, 0xc3, 0xc3, 0x02, 0x00, 0x00,
}
